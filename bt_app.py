# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oESTBkv-TbLO2hC3cF83k5lMqF9-CFXB
"""

!pip install streamlit tensorflow pillow reportlab gdown

!pip install -q streamlit gdown reportlab

# ‚úÖ STEP 1: Install required packages


# ‚úÖ STEP 2: Python code
import streamlit as st
import numpy as np
import os
import requests
from pathlib import Path
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import smtplib, ssl
from email.message import EmailMessage
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
import datetime

# ‚úÖ STEP 3: Model download
MODEL_URL = "https://github.com/Madhu08cse/Brain_Tumor/releases/download/v1.0/BrainTumor.1.h5"
MODEL_PATH = "BrainTumor.h5"

def download_model(url, path):
    model_file = Path(path)
    if model_file.exists():
        print(f"‚úÖ Model already exists at {path}")
        return
    print("‚¨áÔ∏è Downloading model...")
    r = requests.get(url, stream=True)
    if r.status_code == 200:
        with open(path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        print("‚úÖ Download complete.")
    else:
        raise Exception(f"‚ùå Failed to download model: HTTP {r.status_code}")

download_model(MODEL_URL, MODEL_PATH)

# ‚úÖ STEP 4: Load the model
model = load_model(MODEL_PATH)

# ‚úÖ STEP 5: Streamlit UI
st.title("üß† Brain Tumor Detection - Patient MRI Form")

with st.form("tumor_form"):
    name = st.text_input("üë§ Patient Name", max_chars=50)
    email = st.text_input("üìß Email (to send report)")
    uploaded_file = st.file_uploader("üñºÔ∏è Upload Brain MRI Image", type=["jpg", "jpeg", "png"])
    submitted = st.form_submit_button("Submit")

if submitted and uploaded_file:
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption='Uploaded Image', use_column_width=True)

    # ‚úÖ Preprocess image
    img_resized = img.resize((224, 224))
    img_array = image.img_to_array(img_resized)
    img_array = np.expand_dims(img_array, axis=0) / 255.0

    # ‚úÖ Make prediction
    prediction = model.predict(img_array)[0][0]
    has_tumor = prediction >= 0.5

    # ‚úÖ Result text
    if has_tumor:
        result_text = "üö® Tumor Detected"
        advice = (
            "MRI analysis suggests a possible brain tumor.\n"
            "Consult a neurologist or oncologist immediately.\n"
            "This is not a medical diagnosis."
        )
        st.error(result_text)
    else:
        result_text = "‚úÖ No Tumor Detected"
        advice = (
            "No tumor found in the MRI scan.\n"
            "Maintain regular checkups and a healthy lifestyle.\n"
            "This is not a medical diagnosis."
        )
        st.success(result_text)

    # ‚úÖ Generate report
    img_path = "mri_image.jpg"
    img.save(img_path)

    pdf_path = "brain_tumor_report.pdf"
    c = canvas.Canvas(pdf_path, pagesize=A4)
    width, height = A4

    c.setFont("Helvetica-Bold", 18)
    c.drawCentredString(width / 2.0, height - 50, "üß† Brain Tumor Detection Report")
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 90, f"Name: {name}")
    c.drawString(50, height - 110, f"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    c.drawImage(ImageReader(img_path), 50, height - 350, width=200, height=200)
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 370, "Result:")
    text = c.beginText(50, height - 390)
    text.setFont("Helvetica", 11)
    for line in advice.split("\n"):
        text.textLine(line)
    c.drawText(text)
    c.save()

    st.success("üìÑ Report generated!")

    # ‚úÖ Email the report
    if email.strip():
        sender_email = "p.thangaabirami@gmail.com"
        sender_password = "kbqj cubq nfzl aftg"  # NOTE: Use App Password for Gmail, never real password in public code!
        receiver_email = email.strip()

        message = EmailMessage()
        message["From"] = sender_email
        message["To"] = receiver_email
        message["Subject"] = f"Brain Tumor Report - {name or 'Patient'}"
        message.set_content("Attached is your brain tumor detection report.")

        with open(pdf_path, "rb") as f:
            message.add_attachment(f.read(), maintype="application", subtype="pdf", filename="report.pdf")

        try:
            context = ssl.create_default_context()
            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
                server.login(sender_email, sender_password)
                server.send_message(message)
            st.success(f"üìß Report emailed to {receiver_email}")
        except Exception as e:
            st.error(f"‚ùå Email error: {e}")



